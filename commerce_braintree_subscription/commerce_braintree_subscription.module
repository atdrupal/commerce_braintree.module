<?php

define('COMMERCE_BRAINTREE_SUBSCRIPTION_SYNC','synchronization transactions');
/**
 * Implementation of hook_views_api().
 */

function commerce_braintree_subscription_views_api() {     
  return array(         
    'api' => '3.0-alpha1',         
    'path' => drupal_get_path('module', 'commerce_braintree_subscription') . '/views',     
  ); 
}

/**
 * Implements of hook_cb_subscription_charged_unsuccessfully().
 */
function commerce_braintree_subscription_cb_subscription_canceled($user, $sid) {
  commmerce_braintree_subscription_status_change($user->uid, $sid);
}

/**
 * Implements of hook_cb_subscription_charged_unsuccessfully().
 */
function commerce_braintree_subscription_cb_subscription_charged_successfully($user, $sid) {
  commmerce_braintree_subscription_status_change($user->uid, $sid);
}

/**
 * Implements of hook_cb_subscription_charged_unsuccessfully().
 */
function commerce_braintree_subscription_cb_subscription_charged_unsuccessfully($user, $sid) {
  commmerce_braintree_subscription_status_change($user->uid, $sid);
}

/**
 * Implements of hook_cb_subscription_expired().
 */
function commerce_braintree_subscription_cb_subscription_expired($user, $sid) {
  commmerce_braintree_subscription_status_change($user->uid, $sid);
}

/**
 * Implements of hook_cb_subscription_trial_ended().
 */
function commerce_braintree_subscription_cb_subscription_trial_ended($user, $sid) {
  commmerce_braintree_subscription_status_change($user->uid, $sid);
}

/**
 * Implements of hook_cb_subscription_went_past_due().
 */
function commerce_braintree_subscription_cb_subscription_went_past_due($user, $sid) {
  commmerce_braintree_subscription_status_change($user->uid, $sid);
}

/**
 * Implements of hook_cb_subscription_went_active().
 */
function commerce_braintree_subscription_cb_subscription_went_active($user, $sid) {
  commmerce_braintree_subscription_status_change($user->uid, $sid);
}

/**
 * Implements of hook_cron().
 */
function commerce_braintree_subscription_cron() {
  watchdog('braintree', 'The system being synchronize transactions from braintree server.');
  $log = new stdClass();
  $log->action = COMMERCE_BRAINTREE_SUBSCRIPTION_SYNC;
  $log->message = "The system being synchronize transactions from braintree server.";
  commerce_braintree_log_save($log);
  commerce_braintree_subscription_synchronization();
}

/**
 * Implements of hook_cb_subscription_create().
 */
function commerce_braintree_subscription_cb_subscription_created($subscription, $order_id) {
  $order = commerce_order_load($order_id);
  $profile = commerce_braintree_get_profile_from_order($order);
  $sub = new stdClass();
  $sub->uid = $sub->uid = $GLOBALS['user']->uid;
  $sub->pid = $profile->nid;
  $sub->order_id = $order_id;
  
  $sub->sid = $subscription->id;
  $sub->status = $subscription->status;
  $sub->token = $subscription->paymentMethodToken;
  $sub->plan_id = $subscription->planId;
  $sub->price = $subscription->price;
  $sub->first_bill_date = strtotime($subscription->firstBillingDate->format('m/d/Y'));
  $sub->billing_period_start_date = strtotime($subscription->billingPeriodStartDate->format('m/d/Y'));
  $sub->billing_period_end_date = strtotime($subscription->billingPeriodEndDate->format('m/d/Y'));
  $sub->paid_through_date = strtotime($subscription->paidThroughDate->format('m/d/Y'));
  $sub->next_bill_date = strtotime($subscription->nextBillingDate->format('m/d/Y'));
  $sub->next_billing_period_amount = $subscription->nextBillingPeriodAmount;
  commerce_braintree_subscription_save($sub);
}


function commerce_braintree_subscription_local_update($uid, $sid) {
  
  $subscription = commerce_braintree_subscription_get_by_id($sid);
  $sub = commerce_braintree_subscription_load($uid, $sid);
  $sub->status = $subscription->status;
  $sub->plan_id = $subscription->planId;
  $sub->price = $subscription->price;
  $sub->first_bill_date = strtotime($subscription->firstBillingDate->format('m/d/Y'));
  $sub->billing_period_start_date = strtotime($subscription->billingPeriodStartDate->format('m/d/Y'));
  $sub->billing_period_end_date = strtotime($subscription->billingPeriodEndDate->format('m/d/Y'));
  $sub->paid_through_date = strtotime($subscription->paidThroughDate->format('m/d/Y'));
  $sub->next_bill_date = strtotime($subscription->nextBillingDate->format('m/d/Y'));
  $sub->next_billing_period_amount = $subscription->nextBillingPeriodAmount;
  commerce_braintree_subscription_save($sub);
}

/**
 * Update status on local by user id and subscription id
 * @param type $uid
 * @param type $sid
 */
function commmerce_braintree_subscription_status_change($uid, $sid) {
  commmerce_braintree_subscription_local_update($uid, $sid);
  $log = new stdClass();
  $log->action = COMMERCE_BRAINTREE_WEBHOOK_CALLBACK;
  $log->message = "Updated user {$uid} sid {$sid} from {$status_local} to {$sub->status}";
  commerce_braintree_log_save($log);
  return 1;
}
/**
 * When updated subscription, callback hook base subscription status to update our users
 * @param type $kind
 * @param type $user
 * @param type $sid
 */
function commerce_braintree_subscription_status_callback_hook($kind, $user, $sid) {
  switch ($kind) {
    case Braintree_Subscription::CANCELED:
      module_invoke_all('cb_subscription_canceled', $user, $sid);
      break;
    case Braintree_Subscription::EXPIRED:
      module_invoke_all('cb_subscription_expired', $user, $sid);
      break;
    case Braintree_Subscription::ACTIVE:
      module_invoke_all('cb_subscription_went_active', $user, $sid);
      break;
    case Braintree_Subscription::PAST_DUE:
      module_invoke_all('cb_subscription_went_past_due', $user, $sid);
      break;
  }
}

/**
 * Synchronization subscription from braintree server
 */
function commerce_braintree_subscription_synchronization() {
  $update = 0;
  $rows = commmerce_braintree_subscription_get_all();
  foreach ($rows as $row) {
    $sub = commerce_braintree_subscription_get_by_id($row->sid);
    if ($sub == FALSE) {
      continue;
    }
    if (strcmp($row->status, $sub->status) != 0) {
      commmerce_braintree_subscription_local_update($row->uid, $row->sid);
      $user = user_load($row->uid);
      commerce_braintree_subscription_status_callback_hook($sub->status, $user, $row->sid);
      //log
      $log = new stdClass();
      $log->action = COMMERCE_BRAINTREE_SUBSCRIPTION_SYNC;
      $log->message = "Updated user {$row->uid} sid {$row->sid} from {$row->status} to {$sub->status}";
      commerce_braintree_log_save($log);
      ++$update;
    }
  }
 
  if($update) {
    watchdog('braintree', 'The system synchronized transactions success. Total @update updated.', array('@update' => $update), WATCHDOG_WARNING);
  } 
  //log
  $log = new stdClass();
  $log->action = COMMERCE_BRAINTREE_SUBSCRIPTION_SYNC;
  $log->message = "The system synchronized transactions success. Total {$update} updated.";
  commerce_braintree_log_save($log);
}

/**
 * Save subsciption to local table
 * @param type $subscription
 */
function commerce_braintree_subscription_save(stdClass $subscription) {
  $record = array();
  $record['uid'] = isset($subscription->uid) ? $subscription->uid : $GLOBALS['user']->uid;
  $record['sid'] = $subscription->sid;
  $record['order_id'] = $subscription->order_id;
  $record['pid'] = isset($subscription->pid) ? $subscription->pid : NULL;
  $record['token'] = isset($subscription->token) ? $subscription->token : '';
  $record['status'] = isset($subscription->status) ? $subscription->status : '';
  
  $record['plan_id'] = $subscription->plan_id; 
  
  $record['price'] = $subscription->price;
  $record['first_bill_date'] = $subscription->first_bill_date;
  $record['billing_period_start_date'] = $subscription->billing_period_start_date;
  $record['billing_period_end_date'] = $subscription->billing_period_end_date;
  $record['paid_through_date'] = $subscription->paid_through_date;
  $record['next_bill_date'] = $subscription->next_bill_date;
  $record['next_billing_period_amount'] = $subscription->next_billing_period_amount;
  
  $record['created'] = isset($subscription->created) ? $subscription->created : REQUEST_TIME;
  $record['last_update'] = REQUEST_TIME;
  $is_update = commerce_braintree_subscription_load($record['uid'], $record['sid']);
  if ($is_update == FALSE) {
    drupal_write_record("commerce_braintree_subscription", $record);
  }
  else {
    drupal_write_record("commerce_braintree_subscription", $record, array('uid', 'sid'));
  }
}

function commerce_braintree_subscription_load($uid, $sid) {
  $result = db_query('SELECT * FROM {commerce_braintree_subscription} c WHERE c.uid = :uid and c.sid = :sid', array(':uid' => $uid, ':sid' => $sid))->fetchObject();
  return isset($result) ? $result : FALSE;
}


function commmerce_braintree_subscription_status_get($uid, $sid) {
  $subscription = commerce_braintree_subscription_load($uid, $sid);
  return isset($subscription->status) ? $subscription->status : FALSE;
}

/**
 * Get all subscription
 * @return type
 */
function commmerce_braintree_subscription_get_all() {
  $result = db_select('commerce_braintree_subscription', 'c')
    ->fields('c', array('sid', 'uid', 'status'))
    ->execute()
    ->fetchAll();
  return isset($result) ? $result : FALSE;
}
/**
 * Delete subscription by uid and sid
 * @param type $uid
 * @param type $sid
 */
function commerce_braintree_subscription_delete($uid, $sid) {
  db_delete('commerce_braintree_subscription')
  ->condition('uid', $uid)
  ->condition('sid', $sid)
  ->execute();
}

/**
 * Get multi subscription by User ID
 * @param type $uid
 * @return boolean
 */
function commerce_braintree_subscription_load_by_user($uid) {
  $select = db_select('commerce_braintree_subscription', 'c')
    ->fields('c')
    ->condition('uid', $uid)
    ->execute()->fetchAll();
  return isset($select) ? $select : FALSE;
}

/**
 * Select subscription by list field with status difference 'Canceled'
 * @param type $fields
 * @return type
 */
function commerce_braintree_subscription_local_get($fields, $cancel = TRUE) {
  $db_and = db_and();
  foreach ($fields as $field => $value) {
    $db_and->condition($field, $value);
  }
  if ($cancel) {
    $db_and->condition('status', 'Canceled', '<>');
  }
  $select = db_select('commerce_braintree_subscription', 'c')
    ->fields('c')
    ->condition($db_and)
    ->execute()
    ->fetchAssoc();
  return isset($select) ? $select : FALSE ;
}

