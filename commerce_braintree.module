<?php

include_once DRUPAL_ROOT . "/sites/all/libraries/braintree/lib/Braintree.php";
define('COMMERCE_BRAINTREE_LIVE', 'production');
define('COMMERCE_BRAINTREE_SANBOX', 'sandbox');

/**
 * Implementation of hook_menu().
 */
function commerce_braintree_menu() {
  
  $items = array();
  $payment = commerce_payment_method_instance_load('braintree|commerce_payment_braintree');
  
  $items['user/%user/orders/%commerce_order/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['user/%user/subscription'] = array(
    'title' => 'Subscription',
    'page callback' => 'commerce_braintree_subscription_overview',
    'page arguments' => array(1),
    'access callback' => 'commerce_braintree_customer_acess',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_braintree.admin.inc',
  );
  $items['user/%user/subscription/overview'] = array(
    'title' => 'Subscription',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['user/%user/subscription/customer'] = array(
    'title' => 'Customer recurring billing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_braintree_form_customer', 1),
    'access callback' => 'commerce_braintree_customer_acess',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'commerce_braintree.admin.inc',
  );
  
  $items['braintree/%/cancel'] = array(
    'title' => 'Cancel braintree recurring billing',
    'page callback' => 'commerce_braintree_subscription_cancel',
    'page arguments' => array(1),
    'access callback' => 'commerce_braintree_subscription_cancel_access',
    'access arguments' => array(1), 
    'type' => MENU_CALLBACK,
    'file' => 'commerce_braintree.admin.inc',
  );
  $items['upgrade'] = array(
    'title' => 'Upgrade to Premium',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_braintree_form_upgrade'),
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
    'file' => 'commerce_braintree.admin.inc',
  );
  
  if (!isset($payment['settings']['webhook_link']))  return $items;
  $items[$payment['settings']['webhook_link']] = array(
    'title' => 'Trigger occurs form braintree',
    'page callback' => 'commerce_braintree_hooks',
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
    'file' => 'commerce_braintree.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_braintree_permission() {
  return array(
    'cancel any user' => array(
      'title' => t('Cancel any user'), 
      'description' => t('Perform cancel any user.'),
    ),
    'cancel own user' => array(
      'title' => t('Cancel own user'), 
      'description' => t('Perform cancel own user.'),
    ),
  );
}

/**
 * Check grant to access cancel recurring billing page
 * @global type $user
 * @param type $sub
 * @return boolean
 */
function commerce_braintree_subscription_cancel_access($sid) {
  $sub = commerce_braintree_subscription_get_by_id($sid);
  if ($sub == FALSE) {
    return FALSE;
  }
  $customer = commerce_braintree_customer_get_by_token($sub->paymentMethodToken);
  if (user_access('cancel any user')) {
    return TRUE;
  }
  if ($GLOBALS['user']->uid == $customer && user_access('cancel own user')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_braintree_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['braintree'] = array(
    'base' => 'commerce_braintree',
    'title' => t('Braintree - Recurring Billing'),
    'short_title' => t('Braintree'),
    'display_title' => t('Braintree'),
    'description' => t('Braintree Website Payments Pro'),
  );
  return $payment_methods;
}

/**
 * Returns the default settings for the Authorize.Net AIM payment method.
 */
function commerce_braintree_default_settings() {
  return array(
    'environment' => COMMERCE_BRAINTREE_LIVE,
    'merchant_id' => '',
    'public_key' => '',
    'private_key' => '',
    'card_types' => array(),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_braintree_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_braintree_default_settings();
  $form = array();
  $form['environment'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#description' => t('Environment.'),
    '#options' => array(
      COMMERCE_BRAINTREE_LIVE => t('Live transactions in a live account'),
      COMMERCE_BRAINTREE_SANBOX => t('Sanbox transactions in a live account'),
    ),
    '#default_value' => $settings['environment'],
    '#required' => TRUE,
  );
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your Merchant ID'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#description' => t('Your Public key'),
    '#default_value' => $settings['public_key'],
    '#required' => TRUE,
  );
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private key'),
    '#description' => t('Your private key'),
    '#default_value' => $settings['private_key'],
    '#required' => TRUE,
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );
  $form['webhook_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Webhook link'),
    '#description' => t('Link is destination of braintree webhook. Ex braintree/webhook'),
    '#default_value' => isset($settings['webhook_link']) ? $settings['webhook_link'] : '',
    //'#required' => TRUE,
  );
  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_braintree_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));
  }
  if (!empty($card_types)) {
    // Add the credit card types array if necessary.
    $fields['type'] = $card_types;
  }
  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_braintree_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_braintree_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  if (empty($payment_method['settings'])) {
    drupal_set_message(t('This payment method must be configured by an administrator before it can be used.'), 'error');
    return FALSE;
  }
  $message = "";
  $plan_id = commerce_braintree_planid_get($order);
  if ($plan_id == FALSE) {
    drupal_set_message(t('This product type unsupport braintree payment'), 'error');
    return FALSE;
  }
  
  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
      $status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $message = t('Invalid @amount transaction not attempted.', 
                                array('@amount' => commerce_currency_format($charge['amount'], 
                                $charge['currency_code'])));
      commerce_braintree_transaction($payment_method, $order, $charge, $status, $message);
      drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
      return FALSE;
  }
  $customer_new = commerce_braintree_customer_info($pane_values, $order);
  $customer = commerce_braintree_customer_get($order->uid);
  if (!$customer) {
    $customer = commerce_braintree_customer_create($customer_new, $message);
    if (!$customer) {
      $status   = COMMERCE_PAYMENT_STATUS_FAILURE;
      drupal_set_message($message, 'error');
      commerce_braintree_transaction($payment_method, $order, $charge, $status, $message);
      return FALSE;
    }
    
    $token = $customer->customer->creditCards[0]->token;
  }
  else {
    $token = $customer->creditCards[0]->token;
  }

  //Get all subsription user in order
  $subs = commerce_braintree_subscription_get_by_cid($order->uid);
  //If not found. Create new
  if ($subs == FALSE) {
    $sub = commerce_braintree_subscription_create($order->order_id, $token, $plan_id, $message);
    if ($sub !== FALSE) {
      $status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    }
    else {
      drupal_set_message($message, 'error');
      $status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }
    commerce_braintree_transaction($payment_method, $order, $charge, $status, $message);
    return;
  }
  
  //Check duplicate
  foreach ($subs as $sub) {
    if ($plan_id == $sub->planId) {
      $status   = COMMERCE_PAYMENT_STATUS_FAILURE;
      $message  = check_plain("Current user logged is subscripting to {$plan_id}");
      drupal_set_message($message, 'error');
      commerce_braintree_transaction($payment_method, $order, $charge, $status, $message);
      return FALSE;
    }
  }
  //Create new subscription if it don't duplicate
  $sub = commerce_braintree_subscription_create($order->order_id, $token, $plan_id, $message);
  if ($sub !== FALSE) {
    $status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  else {
    drupal_set_message($message, 'error');
    $status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_braintree_transaction($payment_method, $order, $charge, $status, $message);
  return;
}

/**
 * 
 * Get customer information
 * @param type $pane_values
 * @param type $order
 * @return type
 */
function commerce_braintree_customer_info($pane_values, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = array();
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address_get = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
    if (empty($billing_address_get['first_name'])) {
      $name_parts = explode(' ', $billing_address_get['name_line']);
      $billing_address_get['first_name'] = array_shift($name_parts);
      $billing_address_get['last_name'] = implode(' ', $name_parts);
    }
    $billing_address = array(
      'firstName' => isset($billing_address_get['first_name']) ?substr($billing_address_get['first_name'], 0, 50) : "",
      'lastName' => isset($billing_address_get['last_name']) ?substr($billing_address_get['last_name'], 0, 50) : "",
      'company' => isset($billing_address_get['organisation_name']) ? substr($billing_address_get['organisation_name'], 0, 50) : "",
      'streetAddress' => isset($billing_address_get['thoroughfare']) ? substr($billing_address_get['thoroughfare'], 0, 60) : "",
      'extendedAddress' => isset($billing_address_get['premise']) ? substr($billing_address_get['premise'], 0, 60) : "",
      'postalCode' => isset($billing_address_get['postal_code']) ? substr($billing_address_get['postal_code'], 0, 20) : "",
      'countryCodeAlpha2' => isset($billing_address_get['country']) ? $billing_address_get['country'] : "",
      'locality' => isset($billing_address_get['locality']) ? $billing_address_get['locality'] : "",
    );
  }
  
  $credit_card = array(
    'number' => $pane_values['credit_card']['number'],
    'expirationDate' => $pane_values['credit_card']['exp_month'] . '/' . $pane_values['credit_card']['exp_year'],
    'billingAddress' => $billing_address,
    'options' => array(
            'verifyCard' => TRUE
     )
  );
  $custom_field = array(
        'profile_nid' => '',
        'user_nid' => $order->uid,
  );
  $customer_new = array(
    'firstName' => isset($billing_address['firstName']) ? $billing_address['firstName'] : "",
    'lastName' => isset($billing_address['firstName']) ? $billing_address['lastName'] : "",
    'email' => isset($billing_address['firstName']) ? substr($order->mail, 0, 255) : "",
    'id' => $order->uid,
    'creditCard' => $credit_card,
  );
  return $customer_new;
}

/**
 * Create new transaction for order progress
 * @param type $payment_method
 * @param type $order
 * @param type $charge
 * @param type $status
 * @param type $message
 */
function commerce_braintree_transaction($payment_method, $order, $charge, $status, $message) {
  $transaction = commerce_payment_transaction_new('braintree', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = $status;
  $transaction->message = $message;
  commerce_payment_transaction_save($transaction);
}

/**
 *
 * Initializes the Braintree Library with configuration settings
 */
function commerce_braintree_initialize_library() {
  //loading config payment
  $payment = commerce_payment_method_instance_load('braintree|commerce_payment_braintree');
  if (!$payment) {
    return FALSE;
  }
  try {
    Braintree_Configuration::environment($payment['settings']['environment']);
    Braintree_Configuration::merchantId($payment['settings']['merchant_id']);
    Braintree_Configuration::publicKey($payment['settings']['public_key']);
    Braintree_Configuration::privateKey($payment['settings']['private_key']);
  } 
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return FALSE;
  }
  return TRUE;
}

/**
 * Create new customer
 * @param type $customer
 * @param type $message
 * @return boolean
 */
function commerce_braintree_customer_create($customer, &$message = "") {
  //Initializes the Braintree Library
  $load = $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  $nid = commerce_braintree_product_id(0);
  $action = 'Create customer';
  //create customer
  $customer = Braintree_Customer::create($customer);
  if ($customer->success) {
    $message = "Customer was created.";
    commerce_braintree_log_write(0, 0, $nid, $action, $message);
    return $customer;
  } 
  
  foreach ($customer->errors->deepAll() AS $error) {
      $message .= $error->code . ": " . $error->message . "\n";
  }
  commerce_braintree_log_write(0, 0, $nid, $action, $message);
  return FALSE; 
}

/**
 * Update customer information
 * @param type $cid
 * @param array $info
 * @param type $message
 * @return boolean
 */
function commerce_braintree_customer_update($cid, array $info, &$message) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  $action = 'Update customer';
  $nid = commerce_braintree_product_id(0);
  //update customer
  $customer = Braintree_Customer::update($cid, $info);
  if ($customer->success) {
    $message = 'update successfull';
    commerce_braintree_log_write(0, 0, $nid, $action, $message);
    return $customer;
  } 
  
  foreach ($customer->errors->deepAll() AS $error) {
      $message .= $error->code . ": " . $error->message . "\n";
  }
  commerce_braintree_log_write(0, 0, $nid, $action, $message);
  return FALSE;
}

/**
 * Get customer by id
 * @param type $cid
 * @return type 
 */
function commerce_braintree_customer_get($cid) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  try {
    $customer = Braintree_Customer::find($cid);
  } catch (Exception $e) {
    //we have a not found exception!
    $customer = FALSE;
  }
  return $customer;
}

/**
 * Get customer by token
 * @param type $token
 * @return boolean
 */
function commerce_braintree_customer_get_by_token($token) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  try {
    $customer = Braintree_Customer::search(array(
      Braintree_CustomerSearch::paymentMethodToken()->is($token)
    ));
  } catch (Exception $e) {
    //we have a not found exception!
    $customer = FALSE;
  }
  return $customer->_ids[0];
}

/**
 * Get all customer save in Vault
 * @return type 
 */
function commerce_braintree_customer_get_all() {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  //create customer
  $customers = Braintree_Customer::all();
  return $customers;
}

/**
 * Delete customer by id
 * @param type $cid
 * @return type 
 */
function commerce_braintree_customer_delete($cid) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  //delete customer by id
  $result = Braintree_Customer::delete($cid);
  return $result;
}

/**
 * 
 * @return type
 */
function commerce_braintree_customer_delete_all() {
  //Initializes the Braintree Library
  $customers = commerce_braintree_customer_get_all();
  if ($load == FALSE) {    
    return FALSE;  
  }
  foreach ($customers->_ids as $cid) {
    commerce_braintree_customer_delete($cid);
  }
}

/**
 * Apply customer to plan by token and plan ID
 * @param type $order_id
 * @param type $token
 * @param type $plan_id
 * @param type $message
 * @return boolean
 */
function commerce_braintree_subscription_create($order_id, $token, $plan_id, &$message = "") {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  $action = 'create subscription';
  $nid = commerce_braintree_product_id(0);
  $sub = Braintree_Subscription::create(array(
    'paymentMethodToken' => $token,
    'planId' => $plan_id
  ));
  
  if ($sub->success) {
    $message = "Transaction is successsfull";
    //callback for hook cb_subscription_create
    commerce_braintree_log_write(0, $sub->subscription->id, $nid, $action, $message);
    module_invoke_all('cb_subscription_create', $order_id, $sub->subscription->id, $sub->subscription->status);
    
    return $sub;
  }
  foreach ($sub->errors->deepAll() AS $error) {
      $message .= $error->code . ": " . $error->message . "\n";
  }
  commerce_braintree_log_write(0, 0, $nid, $action, $message);
  return FALSE;
}

/**
 * Cancel customer out plan
 * @param type $subscription_id
 * @param type $message
 * @return boolean
 */
function commerce_braintree_subscription_cancel($subscription_id, &$message = "") {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  $action = 'cancel subscription';
  try {
    $result = Braintree_Subscription::cancel($subscription_id);
    if ($result->success) {
      $message = "Subscription {$subscription_id} was canceled!";
      commerce_braintree_log_write(0, $subscription_id, 0, $action, $message);
      return TRUE;
    }
    foreach ($result->errors->deepAll() AS $error) {
        $message .= $error->code . ": " . $error->message . "\n";
    }
    return FALSE;
  } catch (Exception $e) {
    //we have a not found exception!
    $message = $e->getMessage();
  }
  commerce_braintree_log_write(0, $subscription_id, $nid, $action, $message);
  return FALSE;
}

/**
 * Get subscription by customer ID
 * @param type $cid
 */
function commerce_braintree_subscription_get_by_cid($cid) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  $customer = commerce_braintree_customer_get($cid);
  if (!isset($customer->creditCards[0]->subscriptions)) return FALSE;
  $subscriptions = $customer->creditCards[0]->subscriptions;
  $subs = array();
  foreach ($subscriptions as $subscription) {
    if (strcmp($subscription->status, "Canceled") != 0) {
      $subs[] = $subscription;
    }
  }
  if (empty($subs)) {
    return FALSE;
  }
  return $subs;
}

/**
 * Get subscription by plan id and customer id
 * @param type $cid
 * @param type $planid
 * @return boolean
 */
function commerce_braintree_subscription_get_by_cid_planid($cid, $planid) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  $customer = commerce_braintree_customer_get($cid);
  if (!isset($customer->creditCards[0]->subscriptions)) return FALSE;
  $subscriptions = $customer->creditCards[0]->subscriptions;
  foreach ($subscriptions as $subscription) {
    if ($subscription->planId == $planid) {
      return $subscription;
    }
  }
  return FALSE;
}

/**
 * Get subscription by ID
 * @param type $sid
 * @return type
 */
function commerce_braintree_subscription_get_by_id($sid) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  try {
    return Braintree_Subscription::find($sid);
  } catch (Exception $e) {
    //we have a not found exception!
    return FALSE;
  }
}

/**
 * Check plan by id
 * @param type $plan_id
 * @return boolean
 */
function commerce_braintree_plan_check($plan_id) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  //get list plan
  try {
    $plans = Braintree_Plan::all();
    foreach ($plans as $plan) {
      if ($plan->id == $plan_id)      return TRUE;
    }
  } catch (Exception $e) {
    //we have a not found exception!
    return FALSE;
  }
  return FALSE;
}

/**
 * Get creditcard by customer token
 * @param type $token
 * @return boolean
 */
function commerce_braintree_creditcard_get_by_token($token) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  try {
   $creditCard = Braintree_CreditCard::find($token);
  } catch (Exception $e) {
    //we have a not found exception!
    $creditCard = FALSE;
  }
  return $creditCard;
}

/**
 * Get plan id by order
 * @param type $order
 * @return type
 */
function commerce_braintree_planid_get($order) {
  $op = commerce_braintree_product_get_by_order($order);
  if (!isset($op->field_braintree_planid['und']['0']['value'])) {
    return FALSE;
  }
  $plan_id = $op->field_braintree_planid['und']['0']['value'];
  return $plan_id;
}

function commerce_braintree_planid_get_by_sid($sid) {
  $sub = commerce_braintree_subscription_get_by_id($sid);
  return $sub ? $sub->planId : FALSE;
}

/**
 * Get product by order
 * @param type $order
 * @return type
 */
function commerce_braintree_product_get_by_order($order) {
  $line_item_id = $order->commerce_line_items['und']['0']['line_item_id'];
  $line_item = commerce_line_item_load($line_item_id);
  $pid = $line_item->commerce_product['und']['0']['product_id'];
  $op = commerce_product_load($pid);
  return $op;
}

/**
 * Get product ID in Order by User id 
 * @global type $user
 * @param type $uid
 * @return int
 */
function commerce_braintree_product_id($uid) {
  global $user;
  if ($uid == 0) {
    $uid = $user->uid;
  }
  $order = commerce_cart_order_load($uid);
  dsm($order);
  if (empty($order->commerce_line_items)) {
    return 0;
  }
  $line_item_id = $order->commerce_line_items['und']['0']['line_item_id'];
  $line_item = commerce_line_item_load($line_item_id);
  $pid = $line_item->commerce_product['und']['0']['product_id'];
  $op = commerce_product_load($pid);
  return $op->product_id;
}

/**
 * Implements hook_field_attach_validate()
 * Validate field plan id
 */
function commerce_braintree_field_attach_validate($entity_type, $entity, &$errors) {
  if ($entity_type != "commerce_product") {
    return;
  }
  $plan_id = $entity->field_braintree_planid['und']['0']['value'];
  $found = commerce_braintree_plan_check($plan_id);
  if (!$found) {
    $errors['field_braintree_planid']['und']['0'][] = array(
      'error' => "not found",
      'message' => "Not found plan id in braintree server",
    );
  }
}

/**
 * Get transaction status base subscription status
 * @param type $sub_status
 * @return string
 */
function commerce_braintree_transaction_status($sub_status) {
  switch ($sub_status) {
    case 'Active':
      return COMMERCE_PAYMENT_STATUS_SUCCESS;
    case 'Canceled':
      break;
    case 'Expired':
      break;
    case 'Past Due':
      break;
    case 'Pending':
      return COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
}

/**
 * Get orders by uid
 * @param type $uid
 * @return boolean
 */
function commerce_braintree_get_orders_by_uid($uid) {
  $select = db_select('commerce_order', 'c')
            ->fields('c', array('order_id', 'uid'))
            ->condition('uid', $uid)
            ->execute();
  if (!$select ) {
    return FALSE;
  }
  $orders = array();
  foreach ( $select as $row ) {
    $orders[] = $row->order_id;
  }
}

/**
 * Callback access edit customer form
 * @global type $user
 * @return boolean
 */
function commerce_braintree_customer_acess($user) {
  if (!commerce_braintree_customer_get($user->uid)) {
    return FALSE;
  }
  return TRUE;  
}

/**
 * Load user by subscripton id
 * @param type $subscription_id
 * @return type
 */
function commerce_braintree_user_load_by_sid($sid) {
  $user = FALSE;
  $sub = commerce_braintree_subscription_get_by_id($sid);
  $cid = commerce_braintree_customer_get_by_token($sub->paymentMethodToken);
  $user = user_load($cid);
  return $user;
}

/**
 * Write log
 * @global type $user
 * @param type $uid
 * @param type $sid
 * @param type $nid
 * @param type $action
 * @param type $message
 */
function commerce_braintree_log_write($uid, $sid, $nid, $action, $message) {
  global $user;
  if ($uid == 0) {
    $uid = $user->uid;
  }
  $record = array();
  $record['uid'] = $uid;
  $record['sid'] = $sid;
  $record['nid'] = $nid;
  $record['action'] = $action;
  $record['timestamp'] = REQUEST_TIME;
  $record['message'] = $message;
  drupal_write_record("commerce_braintree_log", $record);
}

/**
 * Implementation of hook_views_api().
 */

function commerce_braintree_views_api() {     
  return array(         
    'api' => '3.0-alpha1',         
    'path' => drupal_get_path('module', 'commerce_braintree') . '/views',     
  ); 
}