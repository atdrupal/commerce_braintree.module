<?php
include_once 'lib/Braintree.php';

define('COMMERCE_BRAINTREE_LIVE', 'live');
define('COMMERCE_BRAINTREE_SANBOX', 'sandbox');


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_braintree_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['braintree'] = array(
    'base' => 'commerce_braintree',
    'title' => t('Braintree'),
    'short_title' => t('Braintree'),
    'display_title' => t('Braintree'),
    'description' => t('Braintree Website Payments Pro'),
  );

  return $payment_methods;
}


/**
 * Returns the default settings for the Authorize.Net AIM payment method.
 */
function commerce_braintree_default_settings() {
  return array(
    'environment' => COMMERCE_BRAINTREE_LIVE,
    'merchant_id' => '',
    'public_key' => '',
    'private_key' => '',
    'card_types' => array(),
  );
}


/**
 * Payment method callback: settings form.
 */
function commerce_braintree_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_braintree_default_settings();

  $form = array();

  $form['environment'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#description' => t('Environment.'),
    '#options' => array(
      COMMERCE_BRAINTREE_LIVE => t('Live transactions in a live account'),
      COMMERCE_BRAINTREE_SANBOX => t('Sanbox transactions in a live account'),
    ),
    '#default_value' => $settings['environment'],
    '#required' => TRUE,
  );
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your Merchant ID'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#description' => t('Your Public key'),
    '#default_value' => $settings['public_key'],
    '#required' => TRUE,
  );
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private key'),
    '#description' => t('Your private key'),
    '#default_value' => $settings['private_key'],
    '#required' => TRUE,
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  return $form;
}


/**
 * Payment method callback: checkout form.
 */
function commerce_braintree_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));
  }
  
  if (!empty($card_types)) {
    // Add the credit card types array if necessary.
    $fields['type'] = $card_types;
  }

  return commerce_payment_credit_card_form($fields);
}


/**
 * Payment method callback: checkout form validation.
 */
function commerce_braintree_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}


function commerce_braintree_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  
  dsm('You just enter submit checkout!thank');
  
  dsm($payment_method);
  dsm($pane_form);
  dsm($pane_values);
  dsm($order);
  dsm($charge);
  //setup braintree config
  Braintree_Configuration::environment('asdasd');
  //Braintree_Configuration::environment($payment_method['settings']['environment']);
  Braintree_Configuration::merchantId($payment_method['settings']['merchant_id']);
  Braintree_Configuration::publicKey($payment_method['settings']['public_key']);
  Braintree_Configuration::privateKey($payment_method['settings']['private_key']);
  
  
  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }

  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
    // Prevent the transaction except under limited circumstances.
    $prevent_transaction = TRUE;

    // Allow 0 amount authorizations on Visa cards.
    if ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_ONLY && $card_type == 'visa') {
      $prevent_transaction = FALSE;
    }

    // If the transaction should still be prevented...
    if ($prevent_transaction) {
      // Create a transaction to log the skipped transaction and display a
      // helpful message to the customer.
      $transaction = commerce_payment_transaction_new('commerce_braintree', $order->order_id);
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Invalid @amount transaction not attempted.', array('@amount' => commerce_currency_format($charge['amount'], $charge['currency_code'])));
      commerce_payment_transaction_save($transaction);

      drupal_set_message('We encountered an error processing your transaction. Please contact us to resolve the issue.', 'error');
      return FALSE;
    }
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the default transaction type from the payment method settings.
//  $txn_type = $payment_method['settings']['txn_type'];

  // If txn_type has been specified in the pane values array, such as through
  // the special select element we alter onto the payment terminal form, use
  // that instead.
  if (!empty($pane_values['txn_type'])) {
    $txn_type = $pane_values['txn_type'];
  }

  // Build a name-value pair array for this transaction.
  $nvp = array(
    'x_type' => commerce_authnet_txn_type($txn_type),
    'x_method' => 'CC',
    'x_amount' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'x_card_num' => $pane_values['credit_card']['number'],
    'x_exp_date' => $pane_values['credit_card']['exp_month'] . $pane_values['credit_card']['exp_year'],
  );

  if (isset($pane_values['credit_card']['code'])) {
    $nvp['x_card_code'] = $pane_values['credit_card']['code'];
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Add additional transaction invormation to the request array.
  $nvp += array(
    // Order Information
    'x_invoice_num' => $order->order_number,
    'x_description' => substr(implode(', ', $description), 0, 255),

    // Customer Information
    'x_email' => substr($order->mail, 0, 255),
    'x_cust_id' => substr($order->uid, 0, 20),
    'x_customer_ip' => substr(ip_address(), 0, 15),
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()){
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }

    $nvp += array(
      // Customer Billing Address
      'x_first_name' => substr($billing_address['first_name'], 0, 50),
      'x_last_name' => substr($billing_address['last_name'], 0, 50),
      'x_company' => substr($billing_address['organisation_name'], 0, 50),
      'x_address' => substr($billing_address['thoroughfare'], 0, 60),
      'x_city' => substr($billing_address['locality'], 0, 40),
      'x_state' => substr($billing_address['administrative_area'], 0, 40),
      'x_zip' => substr($billing_address['postal_code'], 0, 20),
      'x_country' => $billing_address['country'],
    );
  }
  else {
    $billing_address = array();
  }
  
  
  //get info user from form checkout submit
  $result = Braintree_Customer::create(array(
    'firstName' => 'Mike',
    'lastName' => 'Jones',
    'company' => 'Jones Co.',
    'email' => 'mike.jones@example.com',
    'phone' => '419.555.1234',
    'fax' => '419.555.1235',
    'website' => 'http://example.com',
    'creditCard' => array(
        'number' => '5105105105105100',
        'expirationDate' => '05/12',
        'cvv' => '123',
        'cardholderName' => 'Mike Jones',
        'billingAddress' => array(
            'firstName' => 'Drew',
            'lastName' => 'Smith',
            'company' => 'Smith Co.',
            'streetAddress' => '1 E Main St',
            'extendedAddress' => 'Suite 101',
            'locality' => 'Chicago',
            'region' => 'IL',
            'postalCode' => '60622',
            'countryCodeAlpha2' => 'US'
        )
    )
  ));
  dsm($result);
  
//  if ($result->success) {
//      print_r("success!: " . $result->transaction->id);
//  } else if ($result->transaction) {
//      print_r("Error processing transaction:");
//      print_r("\n  code: " . $result->transaction->processorResponseCode);
//      print_r("\n  text: " . $result->transaction->processorResponseText);
//  } else {
//      print_r("Validation errors: \n");
//      print_r($result->errors->deepAll());
//  }
  
}