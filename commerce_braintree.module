<?php
/**
 * @file
 * List hooks
 * cb_send_data_braintree
 * cb_receive_data_braintree
 * cb_creditcard_created
 * cb_customer_created
 * cb_subscription_created
 * 
 */

include_once DRUPAL_ROOT . "/sites/all/libraries/braintree/lib/Braintree.php";
define('COMMERCE_BRAINTREE_LIVE', 'production');
define('COMMERCE_BRAINTREE_SANBOX', 'sandbox');
//define action for log
define('COMMERCE_BRAINTREE_CUSTOMER_CREATE','create customer');
define('COMMERCE_BRAINTREE_CREDITCARD_CREATE','create credit card');
define('COMMERCE_BRAINTREE_SUBSCRIPTION_CREATE','create subscription');
define('COMMERCE_BRAINTREE_WEBHOOK_CALLBACK','callback');
define('COMMERCE_BRAINTREE_CREDITCARD_UPDATE','update credit card');

/**
 * Implementation of hook_menu().
 */
function commerce_braintree_menu() {
  $items = array();
  $payment = commerce_payment_method_instance_load('braintree|commerce_payment_braintree');
  
  $items['user/%user/orders/%commerce_order/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['user/%user/subscription'] = array(
    'title' => 'Subscription',
    'page callback' => 'commerce_braintree_subscription_overview',
    'page arguments' => array(1),
    'access arguments' => array('view own subscription'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_braintree.admin.inc',
  );

  $items['user/subscription/credit-card/%/edit'] = array(
    'title' => 'Credit card edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_braintree_creditcard_edit_form', 3),
    'access callback' => 'commerce_braintree_creditcard_edit_acess',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_braintree.form.inc',
  );
  
  $items['braintree/%/cancel'] = array(
    'title' => 'Cancel braintree recurring billing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_braintree_subscription_cancel_form', 1),
    'access callback' => 'commerce_braintree_subscription_cancel_access',
    'access arguments' => array(1), 
    'type' => MENU_CALLBACK,
    'file' => 'commerce_braintree.form.inc',
  );
  $items['upgrade'] = array(
    'title' => 'Upgrade to Premium',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_braintree_form_upgrade'),
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
    'file' => 'commerce_braintree.form.inc',
  );
  
  if (isset($payment['settings']['webhook_link'])){
    $items[$payment['settings']['webhook_link']] = array(
      'title' => 'Trigger occurs form braintree',
      'page callback' => 'commerce_braintree_hooks',
      'access arguments' => array('access content'), 
      'type' => MENU_CALLBACK,
      'file' => 'commerce_braintree.admin.inc',
    );
  }
  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_braintree_permission() {
  return array(
    'view own subscription' => array(
      'title' => t('View own subscription'), 
      'description' => t('View own subscription.'),
    ),
    'cancel any user' => array(
      'title' => t('Cancel any user'), 
      'description' => t('Perform cancel any user.'),
    ),
    'cancel own user' => array(
      'title' => t('Cancel own user'), 
      'description' => t('Perform cancel own user.'),
    ),
    'edit any credit card' => array(
      'title' => t('Edit any credit card'), 
      'description' => t('Perform edit any credit card.'),
    ),
    'edit own credit card' => array(
      'title' => t('Edit own credit card'), 
      'description' => t('Perform edit own credit card.'),
    ),
    'edit any credit card' => array(
      'title' => t('Edit any credit card'), 
      'description' => t('Perform edit any credit card.'),
    ),
  );
}

/**
 * Check grant to access cancel recurring billing page
 * @global type $user
 * @param type $sub
 * @return boolean
 */
function commerce_braintree_subscription_cancel_access($pid) {
  $sub = commerce_braintree_subscription_local_get(array('pid' => $pid));
  if ($sub !== FALSE) {
    $condition = $GLOBALS['user']->uid == $sub['uid'];
    $condition = $condition && user_access('cancel own user');
    $condition = $condition || user_access('cancel any user');
  }
  return !$sub ? FALSE : $condition;
}

function commerce_braintree_creditcard_edit_acess($token) {
  $sub = commerce_braintree_subscription_local_get(array('token' => $token));
  if ($sub !== FALSE) {
    $condition = $GLOBALS['user']->uid == $sub['uid'];
    $condition = $condition && user_access('edit own credit card');
    $condition = $condition || user_access('edit any credit card');
  }
  return !$sub ? FALSE : $condition;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_braintree_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['braintree'] = array(
    'base' => 'commerce_braintree',
    'title' => t('Braintree - Recurring Billing'),
    'short_title' => t('Braintree'),
    'display_title' => t('Braintree'),
    'description' => t('Braintree Website Payments Pro'),
  );
  return $payment_methods;
}

/**
 * Returns the default settings for the Authorize.Net AIM payment method.
 */
function commerce_braintree_default_settings() {
  return array(
    'environment' => COMMERCE_BRAINTREE_LIVE,
    'merchant_id' => '',
    'public_key' => '',
    'private_key' => '',
    'card_types' => array(),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_braintree_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_braintree_default_settings();
  $form = array();
  $form['environment'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#description' => t('Environment.'),
    '#options' => array(
      COMMERCE_BRAINTREE_LIVE => t('Live transactions in a live account'),
      COMMERCE_BRAINTREE_SANBOX => t('Sanbox transactions in a live account'),
    ),
    '#default_value' => $settings['environment'],
    '#required' => TRUE,
  );
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your Merchant ID'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#description' => t('Your Public key'),
    '#default_value' => $settings['public_key'],
    '#required' => TRUE,
  );
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private key'),
    '#description' => t('Your private key'),
    '#default_value' => $settings['private_key'],
    '#required' => TRUE,
  );
  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );
  $form['webhook_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Webhook link'),
    '#description' => t('Link is destination of braintree webhook. Ex braintree/webhook'),
    '#default_value' => isset($settings['webhook_link']) ? $settings['webhook_link'] : '',
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_braintree_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));
  }
  if (!empty($card_types)) {
    // Add the credit card types array if necessary.
    $fields['type'] = $card_types;
  }
  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_braintree_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_braintree_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $plan_id = commerce_braintree_planid_get($order);
  $message = isset($payment_method['settings']) ? '' : t('This payment method must be configured by an administrator before it can be used.');
  $support = !$plan_id ? t('This product type unsupport braintree payment') : '';
  //Check payment method configured or product type support braintree payment
  if (!empty($message) || !empty($support)) {
    drupal_set_message($message . $support , 'error');
    return FALSE;
  }
  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
    $status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $message = t('Invalid @amount transaction not attempted.', 
                              array('@amount' => commerce_currency_format($charge['amount'], 
                              $charge['currency_code'])));
    commerce_braintree_transaction($payment_method, $order, $charge, $status, $message, FALSE);
    drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
    return FALSE;
  }
  //Get all subsription user in order
  $subscriptions = commerce_braintree_subscription_get_by_cid($order->uid);
  
  if (commerce_braintree_subcription_check_duplicate($subscriptions, $plan_id)) {
    //create customer and credit card
    $token = commerce_braintree_submit_create_customer($payment_method, $pane_form, $pane_values, $order, $charge);
    //create subscription
    $subscription = commerce_braintree_subscription_create($order->order_id, $token, $plan_id, $message);
    //save transaction and return
    $status = $subscription ? COMMERCE_PAYMENT_STATUS_SUCCESS : COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_braintree_transaction($payment_method, $order, $charge, $status, $message, $subscription ? FALSE : TRUE);
    return $subscription ? TRUE : FALSE;
  }
  //Duplicate
  commerce_braintree_transaction($payment_method, $order, $charge, COMMERCE_PAYMENT_STATUS_FAILURE, check_plain("User is subscripting to {$plan_id}"));
  return FALSE;
}

/**
 * Check duplicate
 * @param type $subscriptions
 * @param type $plan_id
 * @return boolean
 */
function commerce_braintree_subcription_check_duplicate($subscriptions, $plan_id) {
  if ($subscriptions !== FALSE) {
    foreach ($subscriptions as $subscription) {
      if ($plan_id == $subscription->planId) {
        return FALSE;
      }
    }
  }
  return TRUE;
}

/**
 * Create customer and credit card
 * @param type $payment_method
 * @param type $pane_form
 * @param type $pane_values
 * @param type $order
 * @param type $charge
 * @return boolean
 */
function commerce_braintree_submit_create_customer($payment_method, $pane_form, $pane_values, $order, $charge) {
  //create customer
  $customer = commerce_braintree_customer_get($order->uid);
  if ($customer == FALSE) {
    $customer_new = commerce_braintree_customer_info($order);
    $customer = commerce_braintree_customer_create($customer_new, $message);
    if ($customer == FALSE) {
      commerce_braintree_transaction($payment_method, $order, $charge, COMMERCE_PAYMENT_STATUS_FAILURE, $message);
      return FALSE;
    }
  }
  //create creditcard
  $credit_card = commerce_braintree_creditcard_info($pane_values, $order);
  $credit_card = commerce_braintree_credit_card_create($credit_card);
  $token = $credit_card->creditCard->token;
  return $token;
}

/**
 * Get creditcard in form shipping checkout
 * @param type $pane_values
 * @param type $order
 * @return type 
 */
function commerce_braintree_creditcard_info($pane_values, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = array();
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address_get = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
    if (empty($billing_address_get['first_name'])) {
      $name_parts = explode(' ', $billing_address_get['name_line']);
      $billing_address_get['first_name'] = array_shift($name_parts);
      $billing_address_get['last_name'] = implode(' ', $name_parts);
    }
    $billing_address = array(
      'firstName' => isset($billing_address_get['first_name']) ?substr($billing_address_get['first_name'], 0, 50) : "",
      'lastName' => isset($billing_address_get['last_name']) ?substr($billing_address_get['last_name'], 0, 50) : "",
      'company' => isset($billing_address_get['organisation_name']) ? substr($billing_address_get['organisation_name'], 0, 50) : "",
      'streetAddress' => isset($billing_address_get['thoroughfare']) ? substr($billing_address_get['thoroughfare'], 0, 60) : "",
      'extendedAddress' => isset($billing_address_get['premise']) ? substr($billing_address_get['premise'], 0, 60) : "",
      'postalCode' => isset($billing_address_get['postal_code']) ? substr($billing_address_get['postal_code'], 0, 20) : "",
      'countryCodeAlpha2' => isset($billing_address_get['country']) ? $billing_address_get['country'] : "",
      'locality' => isset($billing_address_get['locality']) ? $billing_address_get['locality'] : "",
    );
  }
  
  $credit_card = array(
    'customerId' => $order->uid,
    'number' => $pane_values['credit_card']['number'],
    'expirationDate' => $pane_values['credit_card']['exp_month'] . '/' . $pane_values['credit_card']['exp_year'],
    'billingAddress' => $billing_address,
    'cvv' => $pane_values['credit_card']['code'],
    'options' => array(
            'verifyCard' => TRUE,
     )
  );
  return $credit_card;
}


/**
 * 
 * Get customer information
 * @param type $pane_values
 * @param type $order
 * @return type
 */
function commerce_braintree_customer_info($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address_get = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
    if (empty($billing_address_get['first_name'])) {
      $name_parts = explode(' ', $billing_address_get['name_line']);
      $billing_address_get['first_name'] = array_shift($name_parts);
      $billing_address_get['last_name'] = implode(' ', $name_parts);
    }
  }
 
  $customer_new = array(
    'firstName' => isset($billing_address_get['first_name']) ? $billing_address_get['first_name'] : "",
    'lastName' => isset($billing_address_get['last_name']) ? $billing_address_get['last_name'] : "",
    'email' => substr($order->mail, 0, 255),
    'id' => $order->uid,
  );
  return $customer_new;
}

/**
 * Create new transaction for order progress
 * @param type $payment_method
 * @param type $order
 * @param type $charge
 * @param type $status
 * @param type $message
 */
function commerce_braintree_transaction($payment_method, $order, $charge, $status, $message, $set_message = TRUE) {
  drupal_set_message($message, 'error');
  if ($status == COMMERCE_PAYMENT_STATUS_FAILURE && $set_message) {
    drupal_set_message($message, 'error');
  }
  $transaction = commerce_payment_transaction_new('braintree', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = $status;
  $transaction->message = $message;
  commerce_payment_transaction_save($transaction);
}

/**
 *
 * Initializes the Braintree Library with configuration settings
 */
function commerce_braintree_initialize_library() {
  //loading config payment
  $payment = commerce_payment_method_instance_load('braintree|commerce_payment_braintree');
  if (!$payment) {
    drupal_set_message(t('This payment method must be configured by an administrator before it can be used.'), 'error');
    die();
  }
  try {
    Braintree_Configuration::environment($payment['settings']['environment']);
    Braintree_Configuration::merchantId($payment['settings']['merchant_id']);
    Braintree_Configuration::publicKey($payment['settings']['public_key']);
    Braintree_Configuration::privateKey($payment['settings']['private_key']);
  } 
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    die();
  }
  return TRUE;
}

/**
 * Create new credit card on braintree server
 * @param type $credit_card
 * @return type
 */
function commerce_braintree_credit_card_create($credit_card) {
  commerce_braintree_initialize_library();
  module_invoke_all('cb_send_data_braintree', commerce_braintree_creditcard_mask($credit_card), COMMERCE_BRAINTREE_CREDITCARD_CREATE, '');
  
  $result = Braintree_CreditCard::create($credit_card);
  
  module_invoke_all('cb_creditcard_created', $result);
  module_invoke_all('cb_receive_data_braintree', $result, COMMERCE_BRAINTREE_CREDITCARD_CREATE, '');
  return ($result->success) ? $result : FALSE;
}

/**
 * Update credit card by token
 * @param type $credit_card
 * @param type $token
 * @return type
 */
function commerce_braintree_credit_card_update($credit_card, $token) {
  commerce_braintree_initialize_library();
  module_invoke_all('cb_send_data_braintree', commerce_braintree_creditcard_mask($credit_card), COMMERCE_BRAINTREE_CREDITCARD_UPDATE, '');
  
  $result = Braintree_CreditCard::update($token, $credit_card);
  
  module_invoke_all('cb_creditcard_update', $result);
  module_invoke_all('cb_receive_data_braintree', $result, COMMERCE_BRAINTREE_CREDITCARD_UPDATE, '');
  return ($result->success) ? $result : FALSE;
}

/**
 * Get error form braintree libraries Exception
 * @param type $result
 * @return string
 */
function commerce_braintree_get_errors($result) {
  $message = '';
  foreach ($result->errors->deepAll() AS $error) {
      $message .= $error->code . ": " . $error->message . "\n";
  }
  return $message;
}

/**
 * Create new customer
 * @param type $customer
 * @param type $message
 * @return boolean
 */
function commerce_braintree_customer_create($customer, &$message = "") {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  module_invoke_all('cb_send_data_braintree', $customer, COMMERCE_BRAINTREE_CUSTOMER_CREATE, $message);
  //create customer
  $customer = Braintree_Customer::create($customer);

  if ($customer->success) {
    $message = "Customer was created.";
    module_invoke_all('cb_customer_created', $customer);
  } 
  else {
    $message = commerce_braintree_get_errors($customer);
  }
  module_invoke_all('cb_receive_data_braintree', $customer, COMMERCE_BRAINTREE_CUSTOMER_CREATE, $message);
  return ($customer->success) ? $customer : FALSE; 
}

/**
 * Get customer by id
 * @param type $cid
 * @return type 
 */
function commerce_braintree_customer_get($cid) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  try {
    $customer = Braintree_Customer::find($cid);
  } catch (Exception $e) {
    //we have a not found exception!
    $customer = FALSE;
  }
  return $customer;
}

/**
 * Get customer by token
 * @param type $token
 * @return boolean
 */
function commerce_braintree_customer_get_by_token($token) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  try {
    $customer = Braintree_Customer::search(array(
      Braintree_CustomerSearch::paymentMethodToken()->is($token)
    ));
  } catch (Exception $e) {
    //we have a not found exception!
    $customer = FALSE;
  }
  return $customer->_ids[0];
}

/**
 * Get all customer save in Vault
 * @return type 
 */
function commerce_braintree_customer_get_all() {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  //create customer
  $customers = Braintree_Customer::all();
  return $customers;
}

/**
 * Apply customer to plan by token and plan ID
 * @param type $order_id
 * @param type $token
 * @param type $plan_id
 * @param type $message
 * @return boolean
 */
function commerce_braintree_subscription_create($order_id, $token, $plan_id, &$message = "") {
  if ($token == FALSE) {
    return FALSE;
  }
  //Initializes the Braintree Library
  $subscription = array(
    'paymentMethodToken' => $token,
    'planId' => $plan_id
  ); 
  module_invoke_all('cb_send_data_braintree', $subscription, COMMERCE_BRAINTREE_SUBSCRIPTION_CREATE, '');
  $sub = Braintree_Subscription::create($subscription);
  if ($sub->success) {
    $message = "Transaction is successsfull";
    module_invoke_all('cb_subscription_created', $sub, $order_id);
  }
  else {
    $message = commerce_braintree_get_errors($sub);
  }
  module_invoke_all('cb_receive_data_braintree', $sub, COMMERCE_BRAINTREE_SUBSCRIPTION_CREATE, $message);
  return  $sub->success ? $sub : FALSE;
}

/**
 * Cancel customer out plan
 * @param type $subscription_id
 * @param type $message
 * @return boolean
 */
function commerce_braintree_subscription_cancel($subscription_id, &$message = "") {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  $action = 'cancel subscription';
  module_invoke_all('cb_send_data_braintree', $subscription_id, $action, '');
  try {
    $result = Braintree_Subscription::cancel($subscription_id);
    $message = $result->success ? "Subscription {$subscription_id} was canceled!" : commerce_braintree_get_errors($result);
    module_invoke_all('cb_receive_data_braintree', $result, $action, $message);
  } 
  catch (Exception $e) {
    $message = $e->getMessage();
    return FALSE;
  }
  return $result->success ? TRUE : FALSE;
}

/**
 * Get subscription by customer ID
 * @param type $cid
 */
function commerce_braintree_subscription_get_by_cid($cid) {
  $resluts = array();  
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  $customer = commerce_braintree_customer_get($cid);
  
  foreach ($customer->creditCards as $credit_card) {
    $subscriptions = $credit_card->subscriptions;
    foreach ($subscriptions as $subscription) {
      if (strcmp($subscription->status, "Canceled") != 0) {
        $resluts[] = $subscription;
      }
    }
  }
  return empty($resluts) ? FALSE : $resluts;
}

/**
 * Get subscription by ID
 * @param type $sid
 * @return type
 */
function commerce_braintree_subscription_get_by_id($sid) {
  //Initializes the Braintree Library
  $load = commerce_braintree_initialize_library();
  if ($load == FALSE) {    
    return FALSE;  
  }
  try {
    return Braintree_Subscription::find($sid);
  } catch (Exception $e) {
    //we have a not found exception!
    return FALSE;
  }
}

/**
 * Check plan by id
 * @param type $plan_id
 * @return boolean
 */
function commerce_braintree_plan_check($plan_id) {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  //get list plan
  try {
    $plans = Braintree_Plan::all();
    foreach ($plans as $plan) {
      if ($plan->id == $plan_id) {
        return TRUE;
      }
    }
  } catch (Exception $e) {
    //we have a not found exception!
    return FALSE;
  }
  return FALSE;
}

/**
 * Get creditcard by customer token
 * @param type $token
 * @return boolean
 */
function commerce_braintree_creditcard_get_by_token($token) {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  try {
   $creditCard = Braintree_CreditCard::find($token);
  } catch (Exception $e) {
    //we have a not found exception!
    $creditCard = FALSE;
  }
  return $creditCard;
}

/**
 * Get plan id by order
 * @param type $order
 * @return type
 */
function commerce_braintree_planid_get($order) {
  $op = commerce_braintree_product_get_by_order($order);
  if (!isset($op->field_braintree_planid['und']['0']['value'])) {
    return FALSE;
  }
  $plan_id = $op->field_braintree_planid['und']['0']['value'];
  return $plan_id;
}

/**
 * Get product by order
 * @param type $order
 * @return type
 */
function commerce_braintree_product_get_by_order($order) {
  $line_item_id = $order->commerce_line_items['und']['0']['line_item_id'];
  $line_item = commerce_line_item_load($line_item_id);
  $pid = $line_item->commerce_product['und']['0']['product_id'];
  $op = commerce_product_load($pid);
  return $op;
}

/**
 * Implements hook_field_attach_validate()
 * Validate field plan id
 */
function commerce_braintree_field_attach_validate($entity_type, $entity, &$errors) {
  if ($entity_type != "commerce_product") {
    return;
  }
  $plan_id = $entity->field_braintree_planid['und']['0']['value'];
  $found = commerce_braintree_plan_check($plan_id);
  if (!$found) {
    $errors['field_braintree_planid']['und']['0'][] = array(
      'error' => "not found",
      'message' => "Not found plan id in braintree server",
    );
  }
}

/**
 * Load user by subscripton id
 * @param type $subscription_id
 * @return type
 */
function commerce_braintree_user_load_by_sid($sid) {
  $sub = commerce_braintree_subscription_get_by_id($sid);
  $cid = commerce_braintree_customer_get_by_token($sub->paymentMethodToken);
  return user_load($cid);
}

/**
 * Hidden credit card number and cvv
 * @param type $credit_card
 * @return type
 */
function commerce_braintree_creditcard_mask($credit_card) {
  $card_number = $credit_card['number'];
  $bin = substr($card_number, 0, 6);
  $last4 = substr($card_number, strlen($card_number)-4, strlen($card_number)-1);
  $stars = commerce_braintreee_string_to_star(substr($card_number, 6, strlen($card_number)-4));
  
  $credit_card['number'] = $bin . $stars . $last4; 
  $credit_card['cvv'] = commerce_braintreee_string_to_star($credit_card['cvv']);
  return $credit_card;
}

/**
 * Convert string to *
 * @param type $str
 * @return string
 */
function commerce_braintreee_string_to_star($str) {
  $str = strlen($str); 
	$number = 0;
	$stars = "";
	while ($number != $str) 
	{
		$stars .= "*";
		++$number;
	}
	return $stars;
}






