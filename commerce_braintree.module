<?php


//require_once libraries_get_path("braintree") . "/lib/Braintree.php";

//define('LB_PATH', libraries_get_path("braintree"));


define('COMMERCE_BRAINTREE_LIVE', 'live');
define('COMMERCE_BRAINTREE_SANBOX', 'sandbox');
// module_load_include('.module', 'libraries', 'libraries');
//commerce_braintree_load();
//function commerce_braintree_load() {
//  $file = './' . libraries_get_path(libraries_get_path) . "/lib/Braintree.phpe";
//
//  if (is_file($file)) {
//    require_once $file;
//  }
//  
//  //dsm($base_path . libraries_get_path("braintree") . "/lib/Braintree.php");
//}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_braintree_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['braintree'] = array(
    'base' => 'commerce_braintree',
    'title' => t('Braintree'),
    'short_title' => t('Braintree'),
    'display_title' => t('Braintree'),
    'description' => t('Braintree Website Payments Pro'),
  );

  return $payment_methods;
}


/**
 * Returns the default settings for the Authorize.Net AIM payment method.
 */
function commerce_braintree_default_settings() {
  return array(
    'environment' => COMMERCE_BRAINTREE_LIVE,
    'merchant_id' => '',
    'public_key' => '',
    'private_key' => '',
    'card_types' => array(),
  );
}


/**
 * Payment method callback: settings form.
 */
function commerce_braintree_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  //dsm();
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_braintree_default_settings();

  $form = array();

  $form['environment'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#description' => t('Environment.'),
    '#options' => array(
      COMMERCE_BRAINTREE_LIVE => t('Live transactions in a live account'),
      COMMERCE_BRAINTREE_SANBOX => t('Sanbox transactions in a live account'),
    ),
    '#default_value' => $settings['environment'],
    '#required' => TRUE,
  );
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your Merchant ID'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#description' => t('Your Public key'),
    '#default_value' => $settings['public_key'],
    '#required' => TRUE,
  );
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private key'),
    '#description' => t('Your private key'),
    '#default_value' => $settings['private_key'],
    '#required' => TRUE,
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  return $form;
}


/**
 * Payment method callback: checkout form.
 */
function commerce_braintree_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));
  }
  
  if (!empty($card_types)) {
    // Add the credit card types array if necessary.
    $fields['type'] = $card_types;
  }

  return commerce_payment_credit_card_form($fields);
}


/**
 * Payment method callback: checkout form validation.
 */
function commerce_braintree_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}


function commerce_braintree_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  
  
//  dsm('You just enter submit checkout!thank');
//  
//  dsm($payment_method);
//  dsm($pane_form);
//  dsm($pane_values);
//  dsm($order);
//  dsm($charge);
 
  
  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }

  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
    // Prevent the transaction except under limited circumstances.
    $prevent_transaction = TRUE;

    // Allow 0 amount authorizations on Visa cards.
    if ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_ONLY && $card_type == 'visa') {
      $prevent_transaction = FALSE;
    }

    // If the transaction should still be prevented...
    if ($prevent_transaction) {
      // Create a transaction to log the skipped transaction and display a
      // helpful message to the customer.
      $transaction = commerce_payment_transaction_new('commerce_braintree', $order->order_id);
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Invalid @amount transaction not attempted.', array('@amount' => commerce_currency_format($charge['amount'], $charge['currency_code'])));
      commerce_payment_transaction_save($transaction);

      drupal_set_message('We encountered an error processing your transaction. Please contact us to resolve the issue.', 'error');
      return FALSE;
    }
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the default transaction type from the payment method settings.
//  $txn_type = $payment_method['settings']['txn_type'];

  
  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()){
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }

    $billing_address = array(
      // Customer Billing Address
      'firstName' => substr($billing_address['first_name'], 0, 50),
      'lastName' => substr($billing_address['last_name'], 0, 50),
      'company' => substr($billing_address['organisation_name'], 0, 50),
      'streetAddress' => substr($billing_address['thoroughfare'], 0, 60),
      'postalCode' => substr($billing_address['postal_code'], 0, 20),
      'countryCodeAlpha2' => $billing_address['country'],
    );
  }
  else {
    $billing_address = array();
  }
  $credit_card = array(
    'number' => $pane_values['credit_card']['number'],
    'expirationDate' => $pane_values['credit_card']['exp_month'] . '/' .  $pane_values['credit_card']['exp_year'],
    'billingAddress' => $billing_address
  );
  // Add additional transaction invormation to the request array.
  $customer_info = array(
    // Customer Information
    'email' => substr($order->mail, 0, 255),
    'id' => substr($order->uid, 0, 20),
    'creditCard' => $credit_card
  );
  dsm($customer_info);
  
  //create customer
  $customer = Braintree_Customer::create($customer_info);
  dsm($customer);
  //if (!$customer->success)    return FALSE;

  //create 
  $subscription = Braintree_Subscription::create(array(
    'paymentMethodToken' => 'a_token',
    'planId' => 'teachers'
  ));
  dsm($subscription);
  
}


/**
 *
 * Initializes the Braintree Library with configuration settings
 */
function commerce_braintree_initialize_library() {
  //loading config payment
  $payment = commerce_payment_method_instance_load('braintree|commerce_payment_braintree');
  
  //Setup configuration
  Braintree_Configuration::environment($payment['settings']['environment']);
  Braintree_Configuration::merchantId($payment['settings']['merchant_id']);
  Braintree_Configuration::publicKey($payment['settings']['public_key']);
  Braintree_Configuration::privateKey($payment['settings']['private_key']);
}

/**
 * create new customer
 * @param stdClass $customer
 * @return type 
 */
function commerce_braintree_customer_create(stdClass $customer) {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  //create customer
  $customer = Braintree_Customer::create($customer);
  return $customer;
}

/**
 * update customer info
 * @param type $cid
 * @param array $info
 * @return type 
 */
function commerce_braintree_customer_update($cid, array $info) {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  //update customer
  $result = Braintree_Customer::update($cid, $info);
  return $result;
}

/**
 * get customer by id
 * @param type $cid
 * @return type 
 */
function commerce_braintree_customer_get(string $cid) {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  //create customer
  $customer = Braintree_Customer::find($cid);
  return $customer;
}

/**
 * delete customer by id
 * @param type $cid
 * @return type 
 */
function commerce_braintree_customer_delete($cid) {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  //delete customer by id
  $result = Braintree_Customer::delete($cid);
  return $result;
}

/**
 * apply customer to plan by token and plan ID
 * @param type $token
 * @param type $plan_id
 * @return type 
 */
function commerce_braintree_subscription_create($token, $plan_id) {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  $result = Braintree_Subscription::create(array(
    'paymentMethodToken' => $token,
    'planId' => $plan_id
  ));
  return $result;
}

/**
 * cancel customer out plan
 * @param type $subscription_id
 * @return type 
 */
function commerce_braintree_subscription_cancel($subscription_id) {
  //Initializes the Braintree Library
  commerce_braintree_initialize_library();
  $result = Braintree_Subscription::cancel($subscription_id);
  return $result;
}

