<?php
/**
 * @file
 * Requirements libraries
 * 
 * Create field_braintree_planid and add to commerce_sp_subscription bundle
 */

function commerce_braintree_requirements($phase) {
  $requirements = array();
  // Ensure translations do not break at install time
  $t = get_t();

  $requirements['braintree'] = array(
    'title' => $t('Braintree Library'),
  );

  $libraries = libraries_get_libraries();
  if (isset($libraries['braintree'])) {
    $requirements['braintree']['value'] = $t('Installed');
    $requirements['braintree']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['braintree']['value'] = $t('Not Installed');
    $requirements['braintree']['severity'] = REQUIREMENT_ERROR;
    $requirements['braintree']['description'] = $t('Please install the example library %url.', array('%url' => 'https://github.com/braintree/braintree_php'));
  }

  return $requirements;
}

function commerce_braintree_install() {
  commerce_braintree_add_field('commerce_product', 'commerce_sp_subscription', 'Plan ID');
}


/**
 * Add field to bundle
 * @param type $entity_type
 * @param type $bundle
 * @param type $label
 * @return type
 */
function commerce_braintree_add_field($entity_type, $bundle, $label) {
  $field = field_info_field('field_braintree_planid');
  $instance = field_info_instance($entity_type, 'field_braintree_planid', $bundle);
  if (empty($field)) {
    $field = array(
      'field_name' => 'field_braintree_planid', 
      'type' => 'text', 
      'settings' => array(
        'max_length' => 255, // default
      ),
      'entity_types' => array($entity_type),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'field_braintree_planid', 
      'entity_type' => $entity_type, 
      'bundle' => $bundle, 
      'label' => $label, 
      'widget' => array(
        'type' => 'text_textfield',
        'settings' => array(
          'size' => 60, // default
        ),
      ), 
      'display' => array(
        'default' => array(
          'label' => 'hidden', 
          'type' => 'text_default',
        ), 
      ),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}


function commerce_braintree_schema() {
  $schema['commerce_braintree_log'] = array(
    'description' => 'The base table transaction logs data sent and received from BrainTree.', 
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a log.', 
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
      ), 
      'uid' => array(
        'description' => 'User id.', 
        'type' => 'int', 
        'unsigned' => TRUE, 
        'not null' => TRUE, 
        'default' => 0,
      ), 
      'cid' => array(
        'description' => 'customer id on braintree.', 
        'type' => 'int', 
        'unsigned' => TRUE, 
        //'not null' => TRUE, 
        'default' => 0,
      ), 
      'nid' => array(
        'description' => 'node id.', 
        'type' => 'int', 
        'unsigned' => TRUE, 
        //'not null' => TRUE, 
        'default' => 0,
      ), 
      'timestamp' => array(
        'description' => 'The Unix timestamp at which the read occurred.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'action' => array(
        'description' => 'The action occurred.', 
        'type' => 'varchar', 
        'length' => 255, 
        //'not null' => TRUE, 
        'default' => '',
      ),
      'message' => array(
        'description' => 'The message description something.', 
        'type' => 'varchar', 
        'length' => 255, 
        //'not null' => TRUE, 
        'default' => '',
      ),
    ), 
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users', 
        'columns' => array('uid' => 'uid'),
      ),
    ), 
    'primary key' => array('id'),
  );
  return $schema;
}